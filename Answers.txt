Question 2

a. Course such that the data type of course_id to varchar(10) [cannot be done hence convert 'credits']

   alter table Course modify credits varchar(10);
   
b. Department to add a new column dept_no of data type number

  alter table Department add column dept_no int;
  
c. Student such that the contents of the column name should not be NULL

  alter table Student modify name varchar(20) not null;
  
d. Classroom such that the default value for column capacity as 50

  alter table Classroom alter capacity set default 50;
  
e. Department such that the contents of column dept_name should be unique 

  alter table Department add unique(dept_name);
  
f. Instructor such that the values for the column salary should be greater than 30000  [question changed]

  ALTER TABLE Instructor ADD CHECK (salary>30000);
___________________________________________________________________________________________________________________________________________________________

Question 3

Remove all constraints and modifications that are given to the database

   alter table Course modify credits int;
   alter table Department drop column dept_no;
   alter table Student modify name varchar(20);
   alter table Classroom alter capacity drop default;
   alter table Department drop index dept_name; [might have a different value in place of 'dept_name']
   alter table Instructor drop check Instructor_chk_1; [might have a different value in place of 'Instructor_chk_1']
___________________________________________________________________________________________________________________________________________________________  Question 4

Change the name of table takes to subject

   alter table Takes rename Subject;
***********************************************************************************************************************************************************
DML

Question 2

Student such that change the name of student as ‘Mozart’ whose Id is 45678
   
     update Student set name='Mozart' where ID='45678'; 
     
Department such that budget of history department is 100000 and building as Taylor

   update Department set building='Taylor' where dept_name='History';
   update Department set budget=100000 where dept_name='History';
   
Instructor such that the salary of each instructor increases by 10%

   update Instructor set salary=salary+(salary*10/100);
   
Course such that the credits of all courses under computer science department is 4
   update Course set credits=4 where dept_name='Comp.Sci.';
   
Student such that give additional 10 points to the total credits for students who have total
credits in between 20 to 50

   update Student set tot_cred=tot_cred+10 where tot_cred > 20 and tot_cred < 50;
   
Instructor such that 5% salary raise to instructors whose salary is less than the average salary.  

   set @a = (select avg(salary) from Instructor);
   update Instructor set salary =  salary + (salary * 5/100) where salary < @a;
   
Teaches such that change the year of the course to 2010 with course id ‘CS-101’ which is under
‘Fall’ semester   

   update Teaches set year=2010 where course_id='CS-101' and semester='Fall';
___________________________________________________________________________________________________________________________________________________________
3. Delete the student information who have total credits is zero.
  
   delete from Student where tot_cred = 0;
___________________________________________________________________________________________________________________________________________________________
4. Delete the record from instructor whose id starts with ‘765’

   delete from Instructor where ID like '765%';
___________________________________________________________________________________________________________________________________________________________
5. Delete all courses that have never been offered(that is do not occur in the section relation)

   DELETE FROM Course where course_id NOT IN (SELECT course_id FROM Section);
***********************************************************************************************************************************************************
  DQL
  
 1. Retrieve the name of instructor along with department names of all instructors
   
     select name, dept_name from Instructor;
___________________________________________________________________________________________________________________________________________________________
 2. Retrieve the semester names from teaches relation and avoid duplicates.

      SELECT DISTINCT semester FROM Teaches;
___________________________________________________________________________________________________________________________________________________________
 3. Retrieve the name of instructor along with 10% raise in their salary
   
   SELECT name,salary+(salary*10/100) FROM Instructor;
___________________________________________________________________________________________________________________________________________________________
4. Retrieve the id and name of instructor who have salary greater than 70000 and working under
   computer science department
   
   SELECT id,name FROM Instructor where salary > 70000 AND dept_name='Comp.Sci.';
___________________________________________________________________________________________________________________________________________________________
5. Retrieve the names of all instructors along with their department names and department buliding
   names
   
   SELECT name,Instructor.dept_name,building FROM Instructor RIGHT JOIN Department ON Instructor.dept_name = Department.dept_name;  
___________________________________________________________________________________________________________________________________________________________
6. Retrieve the instructor names and course identifiers for instructors in the computer science
   department
     
   SELECT name,course_id FROM Instructor RIGHT JOIN Course ON Instructor.dept_name = Course.dept_name where Instructor.dept_name = 'Comp.Sci.';
___________________________________________________________________________________________________________________________________________________________ 
7. Retrieve the details of course which title starts with ‘Intro’

   select * from Course where title like 'Intro%';
___________________________________________________________________________________________________________________________________________________________
8. Retrieve the details of course which title have substring ‘Comp’

   select * from Course where title like '%Comp%';
___________________________________________________________________________________________________________________________________________________________
9. Retrieve the information of students who have exaclty 3 characters in their names
   
   select * from Student where name like '___';
___________________________________________________________________________________________________________________________________________________________
10. Retrieve the information of Instructors who have atleast 3 characters in their names

   select * from Instructor where name like '%___%';
***********************************************************************************************************************************************************
BUILT IN FUNCTIONS

A. Cos(absolute(-10))* e^2) ,print the rounded value

   select ROUND(cos(radians(abs(-10) * exp(2))),2);
___________________________________________________________________________________________________________________________________________________________   
B. Log10( ((5 4)%14) ) , print the result as 2 digit in decimal part

   select round(log10(sqrt(mod(pow(5,4),14))),2);
___________________________________________________________________________________________________________________________________________________________
C. Sin(30)+tan(60), also print the sign of the resullt
   
   select sin(radians(30)) + tan(radians(60)), sign(sin(radians(30)) + tan(radians(60)));
___________________________________________________________________________________________________________________________________________________________
2. Find the greatest preceding or the least succeeding integer of 12.9

   select ceiling(12.9), floor(12.9);
___________________________________________________________________________________________________________________________________________________________
3. Display Name of instructor as Uppercase, lowercase letters, and also shows as first letter in
capital in separate columns

   select upper(name), lower(name), concat(upper(substring(name,1,1)), substring(name,2)) from Instructor;
___________________________________________________________________________________________________________________________________________________________
4. Replace the '-' in Course_id with '/' and display it as new column

   select replace(course_id, '-', '/') from Course;
___________________________________________________________________________________________________________________________________________________________
5. Display the name of instructor with department name as full name

   select concat(name,' ', dept_name) from Instructor;
___________________________________________________________________________________________________________________________________________________________
6. Display the last 3 numbers from course id

   select substring(course_id,-3,3) from Course;
***********************************************************************************************************************************************************
AGGREGATE FUNCTIONS

1. Find the sum of the salaries of all instructors, the maximum salary, the minimum salary, and
   the average salary.

   SELECT sum(salary), max(salary), min(salary), avg(salary) from Instructor;
___________________________________________________________________________________________________________________________________________________________
2. Find the sum of the salaries of all instructors of the 'History' department, as well as the
   maximum salary, the minimum salary, and the average salary in this department.
   
    SELECT sum(salary), max(salary), min(salary), avg(salary) from Instructor where dept_name='History';
___________________________________________________________________________________________________________________________________________________________
3. Retrieve the total number of instructors in the institution

   select count(*) from Instructor;
___________________________________________________________________________________________________________________________________________________________
4. Retrieve the total number of instructors in the 'Computer science' department
   
   select count(*) from Instructor where dept_name='Comp.Sci.';
___________________________________________________________________________________________________________________________________________________________
5. Count the number of distinct salary values in the database.

   select count(distinct salary) from Instructor;
***********************************************************************************************************************************************************
HAVING AND GROUP BY

1. For each department, retrieve the department name, the number of instructors in the
   department, and their average salary.

   select dept_name, count(*), avg(salary) from Instructor group by dept_name;
___________________________________________________________________________________________________________________________________________________________
2. For each course, retrieve the course_id, the semester, and the number of students who takes
   that course.

   select course_id, semester, count(distinct ID) from Subject group by course_id,semester;
___________________________________________________________________________________________________________________________________________________________
3. For each course on which more than two students taken, retrieve the course_id, the semester,
   and the number of students who takes that course.

   select course_id, semester, count(distinct ID) from Subject group by course_id,semester having count(distinct ID) > 2;
   


   select Teaches.course_id, count(Teaches.course_id), name from Teaches , Instructor right join Course on Instructor.dept_name=Course.dept_name where Instructor.ID=Teaches.ID group by course_id, Instructor.dept_name,
Instructor.name;
__________________________________________________________________________________________________________________________________________________________________________________
4. For each course, retrieve the course_id, the instructor name, and the number of courses taken
   from each department
   
    create view view1 as select course_id, name,dept_name from teaches, instructor where instructor.ID = teaches.ID;
__________________________________________________________________________________________________________________________________________________________________________________
5. For each department that has more than two instructors, retrieve the department name and the
   number of its instructors who are making more than $80,000.

select dept_name, count(*) from Instructor where salary>80000 group by dept_name having count(*) > 1;
***********************************************************************************************************************************************************
DCL

1. 

   CREATE USER 'test'@'localhost' IDENTIFIED BY 'password';
   grant select on university.Classroom to 'test'@'localhost';
___________________________________________________________________________________________________________________________________________________________
2. 
   grant all on university.* to 'test'@'localhost';
__________________________________________________________________________________________________________________________________________________________
3.

   revoke all on university.* from 'test'@'localhost';
   revoke all on university.Classroom from 'test'@'localhost';
***********************************************************************************************************************************************************
TCL

1. start transaction;
   update Student set name='John' where ID='44553';
__________________________________________________________________________________________________________________________________________________________ 
2. commit;
___________________________________________________________________________________________________________________________________________________________
3.
   start transaction;
   update Student set name='Peltier' where ID='44553';
__________________________________________________________________________________________________________________________________________________________ 
4. 
   rollback;
___________________________________________________________________________________________________________________________________________________________ 
5. 
   
   start transaction;
   insert into Student values('66666','Diya','Comp.Sci.',23);
   update Student set ID='55555' where ID='66666';
   savepoint A;
   update Student set name='Clement' where ID='55555';
   savepoint B;
   update Student set name='Brice' where ID='55555';
__________________________________________________________________________________________________________________________________________________________ 
6. rollback to savepoint B;
   rollback to savepoint A;
   rollback;
***********************************************************************************************************************************************************
VIEWS

1.

   create view yearwise as select * from Section where year=2009;
___________________________________________________________________________________________________________________________________________________________
2. 
   create view studentlist as select * from Student order by name;
___________________________________________________________________________________________________________________________________________________________
3.
   create view teacher as select * from Instructor where ID not in (select ID from Teaches);
___________________________________________________________________________________________________________________________________________________________
4.
   insert into studentlist values('55555','delwin','Physics',90000);
   update studentlist set name='saviour' where ID='55555';
___________________________________________________________________________________________________________________________________________________________
5.
   delete from studentlist where ID='55555';
___________________________________________________________________________________________________________________________________________________________
6.
   drop view yearwise;
   drop view studentlist;
   drop view teacher;
